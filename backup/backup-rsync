#!/bin/bash
# --------------------------------------------------------
# Script to backup directory trees of a server thru rsync
#
# Parameter :
#  $1 - rsync backup description file
#
#  Revision history :
#   08/06/2013, V1.0 - Creation by N. Bernaerts
#   04/11/2013, V1.1 - Handle error cases & log
#   08/11/2013, V1.2 - Change parameters
#   15/10/2017, V1.3 - Merge configuration in single file
# --------------------------------------------------------

# set PATH (in case)
PATH="/usr/sbin:/usr/bin:/sbin:/bin"

# parameter
BACKUP_DATA="$1"

# log header
LOG_HEADER=$(date +"BCK%d%m")

# temporary files
TMP_PASSWD=$(mktemp -t backup-rsync-XXXXXXXX.pwd)
LOG_CURRENT=$(mktemp -t backup-rsync-XXXXXXXX.log)
BACKUP_LIST=$(mktemp -t backup-rsync-XXXXXXXX.lst)

# set backup parameters
BACKUP_NAME="$(cat ${BACKUP_DATA} | grep "name="   | cut -d'=' -f2-)"
BACKUP_SERVER="$(cat ${BACKUP_DATA} | grep "server="   | cut -d'=' -f2-)"
BACKUP_PORT="$(cat ${BACKUP_DATA}   | grep "port="     | cut -d'=' -f2-)"
BACKUP_MODULE="$(cat ${BACKUP_DATA} | grep "module="   | cut -d'=' -f2-)"
BACKUP_USER="$(cat ${BACKUP_DATA}   | grep "user="     | cut -d'=' -f2-)"
BACKUP_PASSWD="$(cat ${BACKUP_DATA} | grep "password=" | cut -d'=' -f2-)"
BACKUP_OPTION="$(cat ${BACKUP_DATA} | grep "option="   | cut -d'=' -f2-)"

# log and display - start
echo   "${LOG_HEADER} RSync : ${BACKUP_NAME} - Start"
logger "${LOG_HEADER} RSync : ${BACKUP_NAME} - Start"

# generate backup directories list
grep "^dir=" "${BACKUP_DATA}" > "${BACKUP_LIST}"

# create password file
echo "${BACKUP_PASSWD}" > "${TMP_PASSWD}"
chmod 0700 "${TMP_PASSWD}"

# loop thru the backup list
while read LINE
do
	# keep line content
	CONTENT=$(echo "${LINE}" | cut -d'=' -f2-)

	# extract directory data
	DIRECTORY_LABEL=$(echo "${CONTENT}" | cut -d';' -f1)
	DIRECTORY_PATH=$(echo "${CONTENT}" | cut -d';' -f2)
	DIRECTORY_EXCLUDE=$(echo "${CONTENT}" | cut -d';' -f3)

	# if backup dir exists, start the backup
	if [ -d "$DIRECTORY_PATH" ]
	then
		# set options
		ARR_OPTION=( $(echo ${BACKUP_OPTION}) )
		[ "$DIRECTORY_EXCLUDE" != "" ] && ARR_OPTION=( "${ARR_OPTION[@]}" "--exclude=${DIRECTORY_EXCLUDE}" )

		# backup the directory structure
		rsync "${ARR_OPTION[@]}" "--password-file=${TMP_PASSWD}" "${DIRECTORY_PATH}" "rsync://${BACKUP_USER}@${BACKUP_SERVER}:${BACKUP_PORT}/${BACKUP_MODULE}" > "${LOG_CURRENT}"

		# log and display - success or error
		LOG_LINE=$(wc -l "${LOG_CURRENT}" | cut -d' ' -f1)
		[ "$LOG_LINE" -gt 0 ] && RESULT="Success" || RESULT="Error"
		echo   "${LOG_HEADER} - Rsync ${BACKUP_NAME} : [${RESULT}] ${DIRECTORY_PATH} (${ARR_OPTION[@]})"
		logger "${LOG_HEADER} - Rsync ${BACKUP_NAME} : [${RESULT}] ${DIRECTORY_PATH} (${ARR_OPTION[@]})"

	# else, 
	else
		# directory not present
		echo   "${LOG_HEADER} - Rsync ${BACKUP_NAME} : [Error] ${DIRECTORY_PATH} is missing"
		logger "${LOG_HEADER} - Rsync ${BACKUP_NAME} : [Error] ${DIRECTORY_PATH} is missing"
	fi
done < "${BACKUP_LIST}"

# log and display - end
echo   "${LOG_HEADER} - RSync ${BACKUP_NAME} : End"
logger "${LOG_HEADER} - RSync ${BACKUP_NAME} : End"

# remove temporary files
rm -f "${BACKUP_LIST}" "${TMP_PASSWD}" "${LOG_CURRENT}"
