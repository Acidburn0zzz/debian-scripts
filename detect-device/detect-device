#!/bin/bash
# ------------------------------------------------------
#  Detect device presence on a LAN
#
#  This script can be called in 3 ways :
#   --daemon     Permanent scan of LAN to look for devices presence
#   --check      Scan LAN once to look for devices presence
#   --presence   Check for a specific device presence
#
#  15/12/2017, V1.0 - Creation by N. Bernaerts
# ------------------------------------------------------

# -----------------------
# -   Configuration     -
# -----------------------

# devices list
CONFIG_DEFAULT="/etc/detect-device.conf"

# -----------------------
# -     Parameters      -
# -----------------------

# help message if no parameter
if [ ${#} -eq 0 ];
then
    echo "Detect device presence on a LAN"
    echo "This script can be called in 3 ways :"
    echo "  --daemon                     Scan for devices in daemon mode (permanent loop)"
    echo "  --check                      Check for devices presence"
    echo "  --presence <device-name>     Return device presence"
    echo "Common parameters are :"
    echo "  --conf                Path to configuration file (default is ${CONFIG_DEFAULT})"
    echo "  --debug               Print debug informations"
    echo "Presence parameters are :"
    echo "  --timeout             Maximum timeout to be considered as present (in seconds, default to 30mn)"
    echo "  --on-off              Presence given as On / Off (default is last seen in seconds)"
    exit 1
fi

# iterate thru parameters
while test ${#} -gt 0
do
  case $1 in
    --daemon) MODE="daemon"; shift; ;;
    --check) MODE="check"; shift; ;;
    --presence) MODE="presence"; shift; DEVICE="$1"; shift; ;;
    --conf) shift; CONFIG="$1"; shift; ;;
    --debug) DEBUG="on"; shift; ;;
    --timeout) shift; TIMEOUT="$1"; shift; ;;
    --on-off) PRESENCE="onoff"; shift; ;;
    *) echo "Parameter $1 ignored"; shift; ;;
  esac
done

# ---------------------
# -     Controls      -
# ---------------------

# check tools availability
command -v timeout >/dev/null 2>&1 || { echo "[error] timeout is not installed"; exit 1; }
command -v tcpdump >/dev/null 2>&1 || { echo "[error] tcpdump is not installed"; exit 1; }

# default values
[ "${CONFIG}" = "" ] && CONFIG="${CONFIG_DEFAULT}"
[ "${TIMEOUT}" = "" ] && TIMEOUT="1800"
[ "${PRESENCE}" = "" ] && PRESENCE="duration"

# execution mode
[ "${MODE}" = "" ] && { echo "[error] Execution mode should be --daemon or --presence"; exit 1; }

# device name missing
[ "${MODE}" = "presence" -a "${DEVICE}" = "" ] && { echo "[error] Name of device to check presence is missing"; exit 1; }

# configuration file absent
[ ! -f "${CONFIG}" ] && { echo "[error] Configuration file ${CONFIG} missing"; exit 1; }

# ---------------------------
# -     Initialisation      -
# ---------------------------

# temporary directory
DEVICE_DIR="/tmp/detect-device"

# ------------------------
# -    Presence mode     -
# ------------------------

if [ "${MODE}" = "presence" ]
then

	# read device MAC address
	MAC_ADDR=$(grep "^${DEVICE}=" "${CONFIG}" | cut -d'=' -f2)

	# if device definiton is missing
	[ "${MAC_ADDR}" = "" ] && { echo "[error] Device ${DEVICE} is not configured in ${CONFIG}"; exit 1; }

	# set device presence file
	PRESENCE_FILE="${DEVICE_DIR}/${DEVICE}.time"
    
	# if device presence file exists
	if [ -f "${PRESENCE_FILE}" ]
	then
		# get timestamp of last device detection
		TIME_DEVICE=$(cat "${PRESENCE_FILE}")

		# get current timestamp
		TIME_CURRENT=$(date +%s)

		# calculate time since last detection
		DEVICE_STATE=$((TIME_CURRENT-TIME_DEVICE))
	fi

	# reset presence counter if excessing timeout
	[ ${DEVICE_STATE} -gt ${TIMEOUT} ] && DEVICE_STATE=""

	# if conversion to binary state needed, 
	if [ "${PRESENCE}" = "onoff" ]
	then
		# convert to on-off
		[ "${DEVICE_STATE}" != "" ] && DEVICE_STATE="On" || DEVICE_STATE="Off"
	fi
    
	# display answer
	[ "${DEVICE_STATE}" != "" ] && echo "${DEVICE_STATE}"
    
# ------------------------
# -   Detection mode     -
# ------------------------

else
	# create temporary directory
	[ ! -d "${DEVICE_DIR}" ] && mkdir --parents "${DEVICE_DIR}"

	# load array of MAC addresses
	ARR_MAC=( $(grep "=" "${CONFIG}" | cut -d'=' -f2) )

	# infinite loop to listen to traffic
	CONTINUE=true
	while [ ${CONTINUE} = true ] 
	do
		# debug display
		[ "${DEBUG}" = "on" ] && echo "Mode : ${MODE}"

		# if no MAC address to detect, fill with whole list
		[ ${#ARR_DETECT[@]} -eq 0 ] && ARR_DETECT=( "${ARR_MAC[@]}" )

		# debug display
		[ "${DEBUG}" = "on" ] && echo "Checking : ${ARR_DETECT[@]}"

		# generate parameters array
		ARR_PARAM=( )
		for MAC_ADDRESS in "${ARR_DETECT[@]}"
		do
			[ ${#ARR_PARAM[@]} -eq 0 ] && ARR_PARAM=( "ether" "host" "${MAC_ADDRESS}" ) || ARR_PARAM=( "${ARR_PARAM[@]}" "or" "${MAC_ADDRESS}" )
		done

		# detect activity on target devices
		DETECTED_MAC=$(timeout 10 tcpdump -t -e -c 1 --immediate-mode "${ARR_PARAM[@]}" 2>/dev/null | cut -d' ' -f1)

		# if a MAC address has been detected
		if [ "${DETECTED_MAC}" != "" ]
		then
			# look for device name
			DETECTED_DEVICE=$(grep "${DETECTED_MAC}" "${CONFIG}" | cut -d'=' -f1)

			# debug display
			[ "${DEBUG}" = "on" ] && echo "Detected : ${DETECTED_DEVICE}"

			# get current timestamp
			DETECTED_TIME=$(date +%s)

			# update detection file
			[ "${DETECTED_DEVICE}" != "" ] && echo "${DETECTED_TIME}" > "${DEVICE_DIR}/${DETECTED_DEVICE}.time"

			# remove MAC from detection array
			ARR_DETECT=( $(echo "${ARR_DETECT[@]}" | sed "s/${DETECTED_MAC}//" ) )

		# else, no MAC address detected on the network
		else
			# if mode is check only, stop the script, else reload full list of devices
			[ "${MODE}" = "check" ] && CONTINUE=false || ARR_DETECT=( "${ARR_MAC[@]}" )
		fi	
	done
fi
